<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Medidor de Nitrato</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f5f5f5;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }
    h1 {
      font-size: 6vw;
      margin: 10px 0;
      color: #222;
      text-align: center;
    }
    video {
      border: 2px solid #333;
      border-radius: 12px;
      max-width: 95%;
      height: auto;
      transform-origin: center center;
    }
    canvas { display: none; }
    #target {
      position: absolute;
      border: 2px dashed red;
      pointer-events: none;
    }
    #colorBox {
      width: 80px;
      height: 80px;
      border: 2px solid #333;
      margin: 10px;
    }
    #result {
      font-size: 5vw;
      text-align: center;
      margin: 10px;
      color: #333;
    }
    button {
      font-size: 5vw;
      padding: 10px 20px;
      margin: 10px;
      border: none;
      border-radius: 10px;
      background: #0077cc;
      color: white;
      cursor: pointer;
    }
    button:hover { background: #005fa3; }
    @media (min-width: 768px) {
      h1 { font-size: 2vw; }
      #result { font-size: 1.2vw; }
      button { font-size: 1.2vw; }
    }
  </style>
</head>
<body>
  <h1>Medidor de Nitrato</h1>
  <div style="position: relative; display: inline-block;">
    <video id="video" autoplay playsinline></video>
    <div id="target"></div>
    <canvas id="canvas"></canvas>
  </div>
  <div id="colorBox"></div>
  <div id="result">Esperando medición...</div>
  <button id="measureBtn">Medir Color</button>
  <button id="zoomIn">Zoom +</button>
  <button id="zoomOut">Zoom -</button>

  <script>
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const target = document.getElementById('target');
    const result = document.getElementById('result');
    const colorBox = document.getElementById('colorBox');
    const measureBtn = document.getElementById('measureBtn');
    let zoomLevel = 1;

    // Colores de referencia (RGB aproximados) para cada nivel de Nitrato
    const nitrateScale = [
      { ppm: 0, rgb: [255, 245, 235], status: "Safe" },
      { ppm: 20, rgb: [250, 210, 220], status: "Safe" },
      { ppm: 40, rgb: [240, 160, 190], status: "Safe" },
      { ppm: 80, rgb: [230, 120, 170], status: "Unsafe" },
      { ppm: 160, rgb: [220, 70, 140], status: "Unsafe" },
      { ppm: 200, rgb: [200, 40, 120], status: "Unsafe" }
    ];

    // Iniciar cámara
    navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
      .then(stream => { video.srcObject = stream; })
      .catch(err => { alert("Error al acceder a la cámara: " + err); });

    function rgbToHex(r, g, b) {
      return "#" + [r, g, b].map(x => {
        const hex = Math.round(x).toString(16);
        return hex.length === 1 ? "0" + hex : hex;
      }).join("");
    }

    function rgbToHsl(r, g, b) {
      r /= 255; g /= 255; b /= 255;
      const max = Math.max(r, g, b), min = Math.min(r, g, b);
      let h, s, l = (max + min) / 2;
      if (max === min) { h = s = 0; }
      else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r: h = (g - b) / d + (g < b ? 6 : 0); break;
          case g: h = (b - r) / d + 2; break;
          case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
      }
      return [h * 360, s * 100, l * 100];
    }

    function colorDistance(c1, c2) {
      return Math.sqrt(
        Math.pow(c1[0] - c2[0], 2) +
        Math.pow(c1[1] - c2[1], 2) +
        Math.pow(c1[2] - c2[2], 2)
      );
    }

    function measureColor() {
      const ctx = canvas.getContext('2d');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      const rectSize = canvas.width * 0.05; // recuadro más chico aún
      const x = (canvas.width - rectSize) / 2;
      const y = (canvas.height - rectSize) / 2;

      const imageData = ctx.getImageData(x, y, rectSize, rectSize);
      const data = imageData.data;

      let r = 0, g = 0, b = 0, count = 0;
      for (let i = 0; i < data.length; i += 4) {
        const red = data[i], green = data[i+1], blue = data[i+2];
        if (!(red > 240 && green > 240 && blue > 240)) {
          r += red; g += green; b += blue;
          count++;
        }
      }

      if (count === 0) {
        result.textContent = "No se detectó color válido.";
        return;
      }

      r /= count; g /= count; b /= count;
      const measured = [r, g, b];

      // Buscar valor más cercano en la escala
      let bestMatch = nitrateScale[0];
      let minDist = Infinity;
      nitrateScale.forEach(ref => {
        const dist = colorDistance(measured, ref.rgb);
        if (dist < minDist) {
          minDist = dist;
          bestMatch = ref;
        }
      });

      const hex = rgbToHex(r, g, b);
      const [h, s, l] = rgbToHsl(r, g, b);

      colorBox.style.backgroundColor = hex;
      result.innerHTML = `
        <b>Nitrato estimado:</b> ${bestMatch.ppm} ppm<br>
        Estado: <b style="color:${bestMatch.status==="Safe"?"green":"red"}">${bestMatch.status}</b><br><br>
        RGB: (${r.toFixed(2)}, ${g.toFixed(2)}, ${b.toFixed(2)})<br>
        HEX: ${hex}<br>
        HSL: (${h.toFixed(1)}°, ${s.toFixed(1)}%, ${l.toFixed(1)}%)
      `;
    }

    measureBtn.addEventListener('click', measureColor);
    document.getElementById("zoomIn").addEventListener("click", () => {
      zoomLevel += 0.2; video.style.transform = `scale(${zoomLevel})`;
    });
    document.getElementById("zoomOut").addEventListener("click", () => {
      zoomLevel = Math.max(1, zoomLevel - 0.2);
      video.style.transform = `scale(${zoomLevel})`;
    });

    // Dibujar recuadro
    video.addEventListener('loadedmetadata', () => {
      function updateTarget() {
        const rectSize = video.offsetWidth * 0.1;
        target.style.width = rectSize + "px";
        target.style.height = rectSize + "px";
        target.style.left = (video.offsetLeft + (video.offsetWidth - rectSize) / 2) + "px";
        target.style.top = (video.offsetTop + (video.offsetHeight - rectSize) / 2) + "px";
      }
      updateTarget();
      window.addEventListener('resize', updateTarget);
    });
  </script>
</body>
</html>
